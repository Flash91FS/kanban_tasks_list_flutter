name: Flutter CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [android, ios]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'

      - name: Install dependencies
        run: flutter pub get

      - name: Add google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/app/google-services.json

      - name: Add FirebaseOptions.dart
        run: echo "${{ secrets.FIREBASE_OPTIONS_DART }}" > lib/firebase/firebase_options.dart

      - name: Build Android APK
        if: matrix.platform == 'android'
        run: |
          flutter build apk --release -v
          mkdir -p android/app/build/outputs/apk/release/
          cp build/app/outputs/flutter-apk/app-release.apk android/app/build/outputs/apk/release/

#      - name: Build iOS IPA
#        if: matrix.platform == 'ios'
#        env:
#          CI: true
#        run: |
#          flutter build ios --release --no-codesign
#          mkdir -p ios/build/ipa/
#          xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner archive -archivePath ios/build/Runner.xcarchive
#          xcodebuild -exportArchive -archivePath ios/build/Runner.xcarchive -exportPath ios/build/ipa/ -exportOptionsPlist ios/Runner/ExportOptions.plist

#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        platform: [android, ios]
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Deploy to Google Play Store
#        if: matrix.platform == 'android'
#        uses: r0adkll/upload-google-play@v1
#        with:
#          serviceAccountJson: ${{ secrets.GOOGLE_PLAY_JSON }}
#          packageName: com.example.app
#          releaseFile: android/app/build/outputs/apk/release/app-release.apk
#
#      - name: Deploy to Apple App Store
#        if: matrix.platform == 'ios'
#        uses: appleboy/app-store-deploy-action@v1
#        with:
#          apiKey: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
#          issuerId: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
#          keyId: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
#          ipaPath: ios/build/ipa/Runner.ipa
